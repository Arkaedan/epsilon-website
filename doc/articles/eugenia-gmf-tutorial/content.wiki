=EuGENia GMF Tutorial= 
EuGENia is a tool that automatically generates the `.gmfgraph`, `.gmftool` and `.gmfmap` models needed to implement a GMF editor from a single annotated Ecore metamodel. For example, from the following annotated EMF metamodel (expressed using Emfatic) it can generate a fully functional GMF editor, a screenshot of which is displayed below.

'''The Filesystem metamodel:'''

{{{
@namespace(uri="filesystem", prefix="filesystem")
@gmf(foo="bar")
package filesystem;

@gmf.diagram(foo="bar")
class Filesystem {
    val Drive[*] drives;
    val Sync[*] syncs;
}

class Drive extends Folder {

}

class Folder extends File {
    @gmf.compartment(foo="bar")
    val File[*] contents;
}

class Shortcut extends File {
    @gmf.link(target.decoration="arrow", style="dash")
    ref File target;
}

@gmf.link(source="source", target="target", style="dot", width="2")
class Sync {
    ref File source;
    ref File target;
}

@gmf.node(label = "name")
class File {
    attr String name;
}
}}}

'''The generated editor:'''

[[image:Filesystemscreenshot2.png]]

==Supported Annotations==
EuGENia supports the following annotations on Ecore elements.

===gmf===
Applies to the top `EPackage` only and denotes that GMF-related annotations are expected in its elements. This doesn't affect the forthcoming model transformations, only the ECore validation process.

===gmf.diagram===
Denotes the root object of the metamodel. Only one (non-abstract) `EClass` must be annotated as `gmf.diagram`. Accepts the following details
* `diagram.extension` (optional) : the file extension for the diagram file
* `model.extension` (optional) : the file extension for the domain model
* `onefile` (optional) : a value of `true` specifies that the domain model and the diagram should be stored in the same file
* `units` (optional) : the units for the diagram (e.g. `Pixels`)

===gmf.node===
Applies to an `EClass` and denotes that it should appear on the diagram as a node. Accepts the following details
* `border.color` (optional) : an RGB color that will be set as the node's border color.
* `border.style` (optional) : the style of the node's border. Can be set to `solid` (default), `dash` or `dot`.
* `border.width` (optional) : an integer that specifies the width of the node's border.
* `color` (optional) : an RGB color that will be set as the node's background color (e.g. `255,0,0`).
* `figure` (optional) : The figure that will represent the node. Can be set to `rectangle`, `ellipse`, `rounded` (default), `svg` (see `svg.uri`), `polygon` (see `polygon.x` and `polygon.y`) or the fully qualified name of a Java class that implements Figure.
* `label`: the name(s) of the `EAttribute`(s) of the `EClass`, the value(s) of which will be displayed as the label of the node. If `label.placement` is set to `none`, this detail is not required.
* `label.icon` (optional): If set to `true` (default) a small icon appears on the left of the label.
* `label.pattern` (optional): If more than one attributes are specified in the label, the format detail is necessary to show how their values will be rendered in the label. The format follows the Java Message Format style (e.g. `{0} : {1}`).
* `label.placement` (optional) : Defines the placement of the label in relation to the node. Can be set to `internal`, `external` or `none` (no label will be shown). ''(The default distance of an external label in GMF is 20pt which is a bit too far away for my taste. [[../gmf-fix-label-offset/|Read more]] about fixing this without changing the generated code every time)''.
* `label.readOnly` (optional) : A value of `true` denotes that the label cannot be changed in the generated diagram editor.
* `phantom` (optional) : Defines if the node is phantom (`true`/`false`). Phantom nodes are particularly useful in order to visualize containment references using links instead of spatial containment ([[../eugenia-phantom-nodes|read more...]]).
* `polygon.x` (when `figure` is set to `polygon`): list of space-separated integers with the X coordinates of the polygon used as figure. 
* `polygon.y` (when `figure` is set to `polygon`): list of space-separated integers with the Y coordinates of the polygon used as figure. 
* `size` (optional) : a GMF dimension that will be used as the node's preferred size (e.g. `10,5`). Width is specified before height.
* `svg.uri` (when `figure` is set to `svg`): URI of the `.svg` file to be used as figure for the node. For instance `platform:/plugin/my.plugin/my.svg` will access the `my.svg` file in the `my.plugin` plugin loaded in the current workspace. Note: in Indigo, using SVG figures requires the experimental GMF components.
* `tool.description` (optional) : the description of the creation tool.
* `tool.large.bundle` (optional) : The bundle of the large icon of the creation tool.
* `tool.large.path` (optional) : The path of the large icon of the creation tool.
* `tool.name` (optional) : the name of the creation tool.
* `tool.small.bundle` (optional) : The bundle of the small icon of the creation tool.
* `tool.small.path` (optional) : The path of the small icon of the creation tool.

===gmf.link===
Applies to `EClass`es that should appear on the diagram as links and to non-containment `EReference`s.

===gmf.link (for EClass)===
It accepts the following details:
* `color` (optional) : the RGB color of the link
* `incoming` (optional) : Boolean value which specifies whether the generated editor should allow links to be created from target to source. Defaults to `false`.
* `label` (optional) : The names of the `EAttribute`s of the `EClass` the value of which will be displayed as the label of the link
* `source` : The source non-containment `EReference` of the link
* `source.decoration` (optional) : The decoration of the source end of the link. Can be set to `none`, `arrow`, `rhomb`, `filledrhomb`, `square`, `filledsquare`, `closedarrow`, `filledclosedarrow`, or the fully qualified name of a Java class that implements the `org.eclipse.draw2d.RotatableDecoration` interface
* `style` (optional) : the style of the link (see `border.style` above)
* `target` : The target non-containment `EReference` of the link
* `target.decoration` (optional) : See `source.decoration`.
* `tool.description` (optional) : the description of the creation tool
* `tool.large.bundle` (optional) : The bundle of the large icon of the creation tool
* `tool.large.path` (optional) : The path of the large icon of the creation tool
* `tool.name` (optional) : the name of the creation tool
* `tool.small.bundle` (optional) : The bundle of the small icon of the creation tool
* `tool.small.path` (optional) : The path of the small icon of the creation tool
* `width` (optional) : the width of the link

For an example see the `Sync` class in the `filesystem` metamodel

===gmf.link (for non-containment EReference)===
It accepts the following details:
* `color` (optional) : the RGB color of the link
* `label` (optional) : The static text that will be displayed as the label of the link. If no label is specified, the name of the reference is displayed instead.
* `source.decoration` (optional) : The decoration of the source end of the link. Can be set to `none`, `arrow`, `rhomb`, `filledrhomb`, `square`, `filledsquare`, `closedarrow`, `filledclosedarrow`, or the fully qualified name of a Java class that implements an appropriate interface
* `style` (optional) : the style of the link (see `border.style` above)
* `target.decoration` (optional) : As above.
* `tool.description` (optional) : the description of the creation tool
* `tool.large.bundle` (optional) : The bundle of the large icon of the creation tool
* `tool.large.path` (optional) : The path of the large icon of the creation tool
* `tool.name` (optional) : the name of the creation tool
* `tool.small.bundle` (optional) : The bundle of the small icon of the creation tool
* `tool.small.path` (optional) : The path of the small icon of the creation tool
* `width` (optional) : the width of the link

===gmf.compartment (for containment EReference)===
Defines that the containment reference will create a compartment where model elements that conform to the type of the reference can be placed. It accepts the following detail:
* `collapsible` (optional) : Set to `false` to prevent the compartment from collapsing (default is `true`)
* `layout` (optional) : The layout of the compartment. Can be set to free (default) or list

===gmf.affixed (for containment EReference)===
Defines that the containment reference will create nodes which are affixed to the edges of the containing node. [[../eugenia-affixed-nodes|See an example]].

===gmf.label (for EAttribute)===
Defines additional labels for the containing `EClass`. These labels will be displayed underneath the default label for the containing `EClass`. It accepts the following details:
* `label.readOnly` (optional) : A value of `true` denotes that the label cannot be changed in the generated diagram editor.

==Installing EuGENia ''(New Instructions!)''==
EuGENia is a part of the main Epsilon distribution. The update site of Epsilon is `http://download.eclipse.org/epsilon/updates`, and detailed instructions for installing it are available [[http://www.eclipse.org/gmt/epsilon/download|here]].

Although not necessary, you should also install the Emfatic toolkit mentioned above through the following update site: `http://download.eclipse.org/emfatic/update/`

==Running EuGENia==
To run EuGENia you need to do the following:
# Launch a new eclipse instance from the "Run - Eclipse Application" menu using "-XX:PermSize=64M -XX:MaxPermSize=128M -Xms512M -Xmx1024M" as VM arguments in the Run Configuration
# Create a new GMF project in the new instance
# Tick the "Show Dashboard" option in the wizard
# Create and annotate your Ecore metamodel in the "model" folder of your GMF project
# Right-click your Ecore metamodel and select Eugenia->Generate GMF graph, tool and map models
# Create a .genmodel from your Ecore metamodel by selecting the .ecore in the "Domain Model" box of the dashbord and then follow the wizard to "derive" the "Domain Gen Model".
# Right click on the root of the Gen Model editor and "Generate All" to create the java code from the .genmodel
# Right click the generated .gmfmap model and select Create generator model
# Right click the generated .gmfgen model and select Eugenia->Synchronize GMF gen model
# Right click the .gmfgen model again and select Generate diagram code
# Run a new instance of Eclipse
Steps 4-10 can be automated by right-clciking on the `.emf` file and running "Eugenia -> Generate GMF editor".

==Re-running EuGENia==
If you now change your metamodel you'll have to rerun EuGENia to generate your updated editor. Please follow the steps below in the exact order they are displayed:
# Right-click your Ecore metamodel and select Eugenia->Generate GMF graph, tool and map models
# Right-click your .genmodel and select Reload...
# Right click on the root of the Gen Model editor and "Generate All" to create the java code from the .genmodel
# Right click the generated .gmfmap model and select Create generator model
# Right click the generated .gmfgen model and select Eugenia->Synchronize GMF gen model
# Right click the .gmfgen model again and select Generate diagram code
# Run a new instance of Eclipse

(Please note that any changes you have done manually to .gmfgraph, .gmftool and .gmfmap will be '''overwritten'''. Have a look [[../eugenia-polishing|here]] for an alternative way to customize these models)

==Troubleshooting==
* Certain versions of Emfatic do not support annotations without details (e.g. `@gmf` or `@gmf.diagram`). You can use dummy details as a workaround (e.g. `@gmf(foo="bar")`)
* Should you run across the "Node is referenced from multiple containers with different 'List Layout' values" message during validation please ignore it and proceed with the editor code generation.

==Recipes==
* [[../eugenia-nodes-with-images|Nodes with user defined images]] (e.g. jpg, png, gif)
* [[../eugenia-nodes-with-runtime-images|Nodes with user defined images at runtime]]

==Customizing your editor==
[[../eugenia-polishing|Click here]] to find out how you can further customize the generated `.gmfgraph`, `.gmfmap` and `.gmftool` models in ways that are not supported by the annotations provided by EuGENia, and still preserve the customizations when EuGENia is re-invoked.

==Adding Copyright==
To add copyright information to your generated .gmfgen model, simply create a file named copyright.txt next to it. Next time you invoke '''Eugenia->Synchronize GMF gen model''', EuGENia will pick it up and place its contents in the root GenDiagramEditor of your .gmfgen model. If you have added the copyright.txt file, you can also inhect its contents to your .genmodel model (EMF generator model) by right-clicking it and invoking '''Eugenia->Synchronize EMF gen model'''.

==Next Steps==
Now that you've learned how to generate a GMF-based editor using EuGENia, you may also want to add some constraints to your editor, which you can then evaluate (explicitly or on-save) to [[../evl-gmf-integration|check the correctness/consistency of your models]]:

[[image:Filesystemwitherrorshighlighted.png]]

==To do==
* Provide a generic image-loading class in org.eclipse.epsilon.eugenia.runtime which can be extended by users to load their image nodes