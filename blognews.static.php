		<div class="homeitem">
			<h3><a href="http://epsilonblog.wordpress.com/feed/" style="float:right"><img src="/images/rss.gif" alt="More..." /></a>Recent articles in the blog</h3><ul><li><a href="http://epsilonblog.wordpress.com/2009/02/13/the-emf-epackage-registry-view/">The EMF EPackage Registry View</a><br>The EPackage registry (EPackage.Registry.INSTANCE) contains references to all registered ECore EPackages in EMF. To visualise the contents of the registry, we have implemented the following EPackage Registry view.
 
Using this view, one can browse through the EClasses contained in each registered EPackage, discover the super/sub types of each EClass, and navigate through its features and [...]<img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=epsilonblog.wordpress.com&blog=2097844&post=66&subd=epsilonblog&ref=&feed=1" /><li><a href="http://epsilonblog.wordpress.com/2008/11/09/error-markers-and-quick-fixes-in-gmf-editors-using-evl/">Error Markers and Quick Fixes in GMF editors using EVL</a><br>The Epsilon Validation Language (EVL) is a model validation language that provides additional features to OCL, such as guards, constraint dependency management, user interaction, access to Java objects, and the ability to specify a number of fixes for each constraint, that the user can invoke if the constraint fails in order to repair the model. [...]<img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=epsilonblog.wordpress.com&blog=2097844&post=59&subd=epsilonblog&ref=&feed=1" /><li><a href="http://epsilonblog.wordpress.com/2008/09/15/new-in-hutn-071/">New in HUTN 0.7.1</a><br>Last week we released v0.7.1 of our Human-Usable Textual Notation implementation. It&#8217;s available as part of Epsilon 0.8.1. In this release, we&#8217;ve aligned our implementation more closely to the OMG specification, and added some new features. Here&#8217;s a summary of the changes:
Validation
An error is now produced when enumerations, data types and abstract classes are specified [...]<img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=epsilonblog.wordpress.com&blog=2097844&post=47&subd=epsilonblog&ref=&feed=1" /><li><a href="http://epsilonblog.wordpress.com/2008/08/04/eugenia-kick-start-your-gmf-editor-development/">EuGENia: Kick-start your GMF editor development</a><br>GMF is a great piece of software in terms of features - and not only because it&#8217;s built atop GEF and EMF. Nevertheless, (here it comes) it also requires significant effort to learn, the error messages it produces during validation are often cryptic, the gmfmap wizard typically gets it all wrong, and all put together [...]<img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=epsilonblog.wordpress.com&blog=2097844&post=43&subd=epsilonblog&ref=&feed=1" /><li><a href="http://epsilonblog.wordpress.com/2008/01/30/extended-properties-in-eol/">Extended properties in EOL</a><br>Below is a simple metamodel (in Emfatic) for modelling Trees (however interesting this might be)

package SimpleTree;

class Tree {
	attr String name;
	ref Tree#children parent;
	val Tree[*]#parent children;
}
Now, what we want to do is to traverse a model that conforms to this metamodel and calculate and print the depth of each Tree in it. We can do this using [...]<img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=epsilonblog.wordpress.com&blog=2097844&post=20&subd=epsilonblog&ref=&feed=1" /></ul>		</div>