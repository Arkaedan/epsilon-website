<?xml version="1.0"?>
<examples>
	<example src="org.eclipse.epsilon.examples.buildooinstance" title="Create an OO model with EOL" standalone="false">
		<description>
		<![CDATA[In this example we use the Epsilon Object Language (EOL) to programmatically construct a model that conforms to the OO.emf metamodel.]]>
		</description>
		<file name="BuildOOInstance.eol"/>
		<metamodel name="OO.emf"/>
	</example>
	<example src="org.eclipse.epsilon.examples.tree2graph" title="Transform a Tree model to a Graph model with ETL" standalone="false">
		<description>
		<![CDATA[In this example, we use the Epsilon Transformation Language to transform a model that conforms to the Tree.emf metamodel to a model that conforms to the Graph.emf metamodel.]]>
		</description>
		<file name="Tree2Graph.etl"/>
		<metamodel name="Tree.emf"/>
		<metamodel name="Graph.emf"/>
	</example>
	<example src="org.eclipse.epsilon.examples.modelmodification" title="Modify a Tree model with EOL" standalone="false">
		<description>
		<![CDATA[In this example we use the Epsilon Object Language (EOL) to programmatically modify a model that conforms to the Tree.emf metamodel and store the modified version as a new model.]]>
		</description>
		<file name="AddLeaves.eol"/>
		<metamodel name="Tree.emf"/>
	</example>
	<example src="org.eclipse.epsilon.examples.oo2db" title="Transform an OO model to a DB model with ETL" standalone="false">
		<description>
		<![CDATA[In this example, we use the Epsilon Transformation Language to transform a model that conforms to the OO.emf metamodel to a model that conforms to the DB.emf metamodel.]]>
		</description>
		<file name="OO2DB.etl"/>
		<metamodel name="OO.emf"/>
		<metamodel name="DB.emf"/>
	</example>
	<example src="org.eclipse.epsilon.examples.calljava" title="Call Java code from Epsilon" standalone="true">
		<description>
		<![CDATA[In this example, we create a JFrame in EOL, set its bounds and title, and make it visible. The aim of this example is to show how to call Java code from within Epsilon languages.]]>
		</description>
		<file name="CreateJFrame.eol"/>
	</example>
	<example src="org.eclipse.epsilon.examples.tools" title="Creating custom Java tools for Epsilon" standalone="true">
		<description>
		<![CDATA[In this example, we create a custom tool for Epsilon.]]>
		</description>
		<file name="src/org/eclipse/epsilon/examples/tools/SampleTool.java"/>
		<file name="plugin.xml"/>
		<file name="build.properties"/>
	</example>
	<example src="org.eclipse.epsilon.examples.clone" title="Cloning EMF model elements with EOL" standalone="true">
		<description>
		<![CDATA[In this example, we demonstrate how the EmfTool built-in tool can be used to perform deep-copy (cloning) of EMF model elements using EOL.]]>
		</description>
		<file name="clone.eol"/>
		<file name="clone.emf"/>
	</example>
	<example src="org.eclipse.epsilon.examples.validateoo" title="Validate an OO model with EVL" standalone="false">
		<description>
		<![CDATA[In this example, we use the Epsilon Validation Language (EVL), to express constraints for models that conform to the OO.emf metamodel.]]>
		</description>
		<file name="ValidateOO.evl"/>
		<metamodel name="OO.emf"/>
	</example>
	<example src="org.eclipse.epsilon.examples.evl.intermodel" title="Validate an OO model against a DB model with EVL" standalone="false">
		<description>
		<![CDATA[In this example, we use the Epsilon Validation Language (EVL) for expressing inter-model constraints that check a model that conforms to the OO.emf metamodel against a model that conforms to the DB.emf metamodel.]]>
		</description>
		<file name="checkoovsdb.evl"/>
		<metamodel name="OO.emf"/>
		<metamodel name="DB.emf"/>
	</example>
	<example src="org.eclipse.epsilon.examples.egldoc" title="Generate HTML documentation from an Ecore metamodel with EGL" standalone="false">
		<description>
		<![CDATA[In this example, we demonstrate how the template-based Epsilon Generation Language can be used to generate HTML documentation from an Ecore metamodel.]]>
		</description>
		<file name="src/org/epsilon/egl/doc/egl/html/Class.egl"/>
		<file name="src/org/epsilon/egl/doc/egl/html/Packages.egl"/>
		<file name="src/org/epsilon/egl/doc/egl/Emf2Html.egl"/>
	</example>
	<example src="org.eclipse.epsilon.examples.standalone" title="Use Epsilon in standalone Java applications">
		<description>
		<![CDATA[In this example, we demonstrate how Epsilon languages can be used in standalone, non-Eclipse-based Java applications.]]>
		</description>
		<file name="src/org/eclipse/epsilon/examples/standalone/eol/EolStandaloneExample.java"/>
		<file name="src/org/eclipse/epsilon/examples/standalone/EpsilonStandaloneExample.java"/>
	</example>
	<example src="org.eclipse.epsilon.examples.mergeentitywithvocabulary" title="Heterogeneous Model Merging with ECL/EML" standalone="false">
		<description>
		<![CDATA[In this example, we demonstrate merging heterogeneous models that conform to the Entity.emf and DomainVocabulary.emf metamodels using the Epsilon Comparison and Merging Languages.<br><br>In the first step, we use the Comparison.ecl ECL program to establish correspondences between the two models, and in the second step we use the Merging.eml EML program to merge the two models on the identified correspondences.]]>
		</description>
		<file name="Comparison.ecl"/>
		<file name="Merging.eml"/>
		<metamodel name="Entity.emf"/>
		<metamodel name="DomainVocabulary.emf"/>
	</example>	
	<example src="org.eclipse.epsilon.examples.shortestpath" title="Dijkstra's shortest path algorithm with EOL/EVL">
		<description>
		<![CDATA[In this example, we use the Epsilon Object Language to implement Dijkstra's algorithm that allows us to find the shortest path between two nodes of a directed graph that conforms to the DirectedGraph.emf metamodel. To check the graph for cycles we use the constraints in ValidateDirectedGraph.evl]]>
		</description>
		<file name="ShortestPath.eol"/>
		<metamodel name="DirectedGraph.emf"/>
		<file name="ValidateDirectedGraph.evl"/>
	</example>
	<example src="org.eclipse.epsilon.examples.mddtif" title="MDD-TIF complete case study" standalone="true">
		<description>
		<![CDATA[In this example, we implement the <a href="http://www.dsmforum.org/events/MDD-TIF07/InteractiveTVApps.pdf">requirements</a> set in the <a href="http://www.dsmforum.org/events/MDD-TIF07">MDD-TIF workshop</a>. This example demonstrates how different languages in Epsilon (EVL, EGL, EML, ETL and ECL) can be combined to implement more complex operations using the <a href="../doc/workflow">workflow</a>. A detailed discussion on this example is provided <a href="http://www.dsmforum.org/events/MDD-TIF07/Epsilon.2.pdf">here</a>.]]>
		</description>
		<file name="competitions/Competition2TVApp.xml"/>
		<file name="competitions/Competition2TVApp.etl"/>
		<file name="competitions/ValidateCompetition.evl"/>
	</example>	
	<example src="org.eclipse.epsilon.examples.oomerging" title="Compare, validate and merge OO models" standalone="true">
		<description>
		<![CDATA[In this example, we use ECL to compare two OO models, then use EVL to check the identified matches for consistency and finally EML to merge them. The three different programs are bound together and executed sequentially using the <a href="../doc/workflow">workflow</a>.]]>
		</description>
		<file name="CompareSimpleOO.ecl"/>
		<file name="ValidateSimpleOO.evl"/>
		<file name="MergeSimpleOO.eml"/>
	</example>
	<example src="org.eclipse.epsilon.eugenia.examples.friends" title="Implement a GMF editor with image nodes using EuGENia" standalone="true" runnable="false">
		<description>
		<![CDATA[In this example we use EuGENia to implement a GMF editor with images instead of shapes for nodes.]]>
		</description>
		<file name="model/friends.emf"/>
		<file name="../org.eclipse.epsilon.eugenia.examples.friends.figures/src/figures/PersonFigure.java"/>
		<project src="org.eclipse.epsilon.eugenia.examples.friends.figures"/>
	</example>
	<example src="org.eclipse.epsilon.eugenia.examples.endlabels" title="Implement a GMF editor with end labels in connections using EuGENia" standalone="true" runnable="false">
		<description>
		<![CDATA[In this example we use EuGENia to implement a GMF editor with end labels in connections.]]>
		</description>
		<file name="model/endlabels.emf"/>
		<file name="model/ECore2GMF.eol"/>
		<file name="resources/Screenshot.png" image="true"/>
	</example>
	<example src="org.eclipse.epsilon.eugenia.examples.flowchart" title="Implement a flowchart GMF editor using EuGENia" standalone="true" runnable="false">
		<description>
		<![CDATA[In this example we use EuGENia to implement a flowchart GMF editor, and EOL to <a href="http://epsilonblog.wordpress.com/2009/06/15/eugenia-polishing-your-gmf-editor/">polish its appearance</a>.]]>
		</description>
		<file name="model/flowchart.emf"/>
		<file name="model/ECore2GMF.eol"/>
		<file name="model/FixGMFGen.eol"/>
		<file name="../org.eclipse.epsilon.eugenia.examples.flowchart.diagram.figures/src/org/eclipse/epsilon/eugenia/examples/flowchart/diagram/figures/DiamondFigure.java"/>
		<project src="org.eclipse.epsilon.eugenia.examples.flowchart.diagram.figures"/>
	</example>
	<example src="org.eclipse.epsilon.workflow.extension.example" title="Provide custom/extended tasks for the workflow" standalone="true" runnable="false">
		<description>
		<![CDATA[In this example we demonstrate how you can define your own ANT tasks that extend the Epsilon workflow tasks.]]>
		</description>
		<file name="ant/org/eclipse/epsilon/workflow/extension/example/tasks/EolExtTask.java"/>
		<file name="plugin.xml"/>
	</example>
	<example src="org.eclipse.epsilon.examples.flock.petrinets" title="Migrate Petri net models with Epsilon Flock" standalone="true">
		<description>
		<![CDATA[In this example we demonstrate how to migrate a model in response to metamodel changes with Epsilon Flock.]]>
		</description>
		<file name="Petrinets.mig"/>
		<file name="metamodels/Original.emf"/>
		<file name="metamodels/Evolved.emf"/>
	</example>
	<example src="org.eclipse.epsilon.examples.workflow.transactions" title="Use model transactions in a workflow" standalone="true" runnable="false">
		<description>
		<![CDATA[In this example we demonstrate using the ant-contrib try/catch tasks and the Epsilon model transactions tasks to conditionally rollback changes in models modified in a workflow. To run this example you need to have the latest <b>interim</b> version of Epsilon and set up Eclipse with the ant-contrib ANT tasks]]>
		</description>
		<file name="build.xml"/>
		<file name="tree.emf"/>
	</example>
	<!--example src="org.eclipse.epsilon.examples.mdr" title="Use Epsilon with MDR models" standalone="true" runnable="true">
		<description>
		<![CDATA[In this example we demonstrate using EOL to query an MDR-based UML 1.4 model designed using <a href="http://argouml.tigris.org">ArgoUML</a> and exported to XMI 1.2. 
		This example demonstrates how Epsilon can be used to manage not only EMF-based but also MDR-based models.]]>
		</description>
		<file name="queryuml14.eol"/>
		<file name="bank-model.xmi"/>
	</example-->
</examples>